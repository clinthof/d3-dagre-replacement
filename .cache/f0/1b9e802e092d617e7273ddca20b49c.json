{"id":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","dependencies":[{"name":"/Users/felixclinthorne/Downloads/dagre-d3-graph-forked(2)/package.json","includedInParent":true,"mtime":1661390360000},{"name":"/Users/felixclinthorne/Downloads/dagre-d3-graph-forked(2)/node_modules/dagre-d3/package.json","includedInParent":true,"mtime":1661376024718},{"name":"./intersect-line","loc":{"line":1,"column":28,"index":28},"parent":"/Users/felixclinthorne/Downloads/dagre-d3-graph-forked(2)/node_modules/dagre-d3/lib/intersect/intersect-polygon.js","resolved":"/Users/felixclinthorne/Downloads/dagre-d3-graph-forked(2)/node_modules/dagre-d3/lib/intersect/intersect-line.js"}],"generated":{"js":"var intersectLine = require(\"./intersect-line\");\n\nmodule.exports = intersectPolygon;\n\n/*\n * Returns the point ({x, y}) at which the point argument intersects with the\n * node argument assuming that it has the shape specified by polygon.\n */\nfunction intersectPolygon(node, polyPoints, point) {\n  var x1 = node.x;\n  var y1 = node.y;\n\n  var intersections = [];\n\n  var minX = Number.POSITIVE_INFINITY,\n      minY = Number.POSITIVE_INFINITY;\n  polyPoints.forEach(function(entry) {\n    minX = Math.min(minX, entry.x);\n    minY = Math.min(minY, entry.y);\n  });\n\n  var left = x1 - node.width / 2 - minX;\n  var top =  y1 - node.height / 2 - minY;\n\n  for (var i = 0; i < polyPoints.length; i++) {\n    var p1 = polyPoints[i];\n    var p2 = polyPoints[i < polyPoints.length - 1 ? i + 1 : 0];\n    var intersect = intersectLine(node, point,\n      {x: left + p1.x, y: top + p1.y}, {x: left + p2.x, y: top + p2.y});\n    if (intersect) {\n      intersections.push(intersect);\n    }\n  }\n\n  if (!intersections.length) {\n    console.log(\"NO INTERSECTION FOUND, RETURN NODE CENTER\", node);\n    return node;\n  }\n\n  if (intersections.length > 1) {\n    // More intersections, find the one nearest to edge end point\n    intersections.sort(function(p, q) {\n      var pdx = p.x - point.x,\n          pdy = p.y - point.y,\n          distp = Math.sqrt(pdx * pdx + pdy * pdy),\n\n          qdx = q.x - point.x,\n          qdy = q.y - point.y,\n          distq = Math.sqrt(qdx * qdx + qdy * qdy);\n\n      return (distp < distq) ? -1 : (distp === distq ? 0 : 1);\n    });\n  }\n  return intersections[0];\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-polygon.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}}],"sources":{"node_modules/dagre-d3/lib/intersect/intersect-polygon.js":"var intersectLine = require(\"./intersect-line\");\n\nmodule.exports = intersectPolygon;\n\n/*\n * Returns the point ({x, y}) at which the point argument intersects with the\n * node argument assuming that it has the shape specified by polygon.\n */\nfunction intersectPolygon(node, polyPoints, point) {\n  var x1 = node.x;\n  var y1 = node.y;\n\n  var intersections = [];\n\n  var minX = Number.POSITIVE_INFINITY,\n      minY = Number.POSITIVE_INFINITY;\n  polyPoints.forEach(function(entry) {\n    minX = Math.min(minX, entry.x);\n    minY = Math.min(minY, entry.y);\n  });\n\n  var left = x1 - node.width / 2 - minX;\n  var top =  y1 - node.height / 2 - minY;\n\n  for (var i = 0; i < polyPoints.length; i++) {\n    var p1 = polyPoints[i];\n    var p2 = polyPoints[i < polyPoints.length - 1 ? i + 1 : 0];\n    var intersect = intersectLine(node, point,\n      {x: left + p1.x, y: top + p1.y}, {x: left + p2.x, y: top + p2.y});\n    if (intersect) {\n      intersections.push(intersect);\n    }\n  }\n\n  if (!intersections.length) {\n    console.log(\"NO INTERSECTION FOUND, RETURN NODE CENTER\", node);\n    return node;\n  }\n\n  if (intersections.length > 1) {\n    // More intersections, find the one nearest to edge end point\n    intersections.sort(function(p, q) {\n      var pdx = p.x - point.x,\n          pdy = p.y - point.y,\n          distp = Math.sqrt(pdx * pdx + pdy * pdy),\n\n          qdx = q.x - point.x,\n          qdy = q.y - point.y,\n          distq = Math.sqrt(qdx * qdx + qdy * qdy);\n\n      return (distp < distq) ? -1 : (distp === distq ? 0 : 1);\n    });\n  }\n  return intersections[0];\n}\n"},"lineCount":56}},"error":null,"hash":"42e89423b4ac4a3f60d6bf5da439ba28","cacheData":{"env":{}}}