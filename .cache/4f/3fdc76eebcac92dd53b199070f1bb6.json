{"id":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","dependencies":[{"name":"/Users/felixclinthorne/Downloads/dagre-d3-graph-forked(2)/package.json","includedInParent":true,"mtime":1661390360000},{"name":"/Users/felixclinthorne/Downloads/dagre-d3-graph-forked(2)/node_modules/dagre-d3/package.json","includedInParent":true,"mtime":1661376024718}],"generated":{"js":"module.exports = intersectRect;\n\nfunction intersectRect(node, point) {\n  var x = node.x;\n  var y = node.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = node.width / 2;\n  var h = node.height / 2;\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = dy === 0 ? 0 : h * dx / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = dx === 0 ? 0 : w * dy / dx;\n  }\n\n  return {x: x + sx, y: y + sy};\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/dagre-d3/lib/intersect/intersect-rect.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}}],"sources":{"node_modules/dagre-d3/lib/intersect/intersect-rect.js":"module.exports = intersectRect;\n\nfunction intersectRect(node, point) {\n  var x = node.x;\n  var y = node.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = node.width / 2;\n  var h = node.height / 2;\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = dy === 0 ? 0 : h * dx / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = dx === 0 ? 0 : w * dy / dx;\n  }\n\n  return {x: x + sx, y: y + sy};\n}\n"},"lineCount":33}},"error":null,"hash":"4a01cb67b4355e3c9fbe097404b5dfed","cacheData":{"env":{}}}